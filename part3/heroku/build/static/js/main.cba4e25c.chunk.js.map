{"version":3,"sources":["services/phonebook.js","App.js","reportWebVitals.js","index.js"],"names":["baseUrl","phoneService","getAll","axios","get","create","newPerson","post","remove","id","delete","update","person","put","Message","message","error","className","Filter","props","value","filter","onChange","event","setFilter","target","PersonForm","useState","newName","setNewName","newNumber","setNewNumber","onSubmit","preventDefault","persons","map","name","indexOf","window","confirm","toUpdate","find","el","setPersons","setMessage","setTimeout","number","then","response","concat","data","type","Delete","toDelete","onClick","catch","Numbers","toLowerCase","includes","App","useEffect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cba4e25c.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    return axios.get(baseUrl)\r\n}\r\n\r\nconst create = newPerson => {\r\n    return axios.post(baseUrl, newPerson)\r\n}\r\n\r\nconst remove = id => {\r\n    return axios.delete(baseUrl + '/' + id)\r\n}\r\n\r\nconst update = person => {\r\n    return axios.put(baseUrl + '/' + person.id, person)\r\n}\r\n\r\nconst phoneService = {getAll, create, remove, update}\r\nexport default phoneService","import React, { useState, useEffect } from 'react'\r\nimport phoneService from './services/phonebook'\r\n\r\nconst Message = ({ message , error = false}) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n  if (error) {\r\n    return (\r\n      <div className=\"error\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n  else {\r\n    return (\r\n      <div className=\"success\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst Filter = (props) => {\r\n  const handleFilterChange = (event) => {\r\n    props.setFilter(event.target.value)\r\n  }\r\n  return (\r\n    <div>\r\n      filter shown with <input value={props.filter} onChange={handleFilterChange}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst PersonForm = (props) => {\r\n  const [newName, setNewName] = useState('')\r\n  const [newNumber, setNewNumber] = useState('')\r\n  const addName = (event) => {\r\n    event.preventDefault()\r\n    const names = props.persons.map((person) => person.name)\r\n    if(names.indexOf(newName) >= 0) {\r\n      if (window.confirm(\r\n        `${newName} is already added to phonebook, replace the old number with a new one?`\r\n        )) {\r\n        const toUpdate = props.persons.find(el => el.name === newName)\r\n        toUpdate['number'] = newNumber\r\n        phoneService.update(toUpdate)\r\n        props.setPersons(\r\n          props.persons.map(el => el.name === toUpdate.name ? toUpdate : el)\r\n        )\r\n        props.setMessage(`Number changed for ${newName}`)\r\n        setTimeout(() => {props.setMessage(null)}, 5000)\r\n        setNewName('')\r\n        setNewNumber('')\r\n      }\r\n    }\r\n    else {\r\n      const newPerson = {name: newName, number: newNumber}\r\n      phoneService.create(newPerson)\r\n                  .then(response => {\r\n                    props.setPersons(\r\n                      props.persons.concat(\r\n                        {...newPerson, id: response.data.id}\r\n                      )\r\n                    )\r\n                  })\r\n      props.setMessage(`Added ${newName}`)\r\n      setTimeout(() => {props.setMessage(null)}, 5000)\r\n      setNewName('')\r\n      setNewNumber('')\r\n    }\r\n  }\r\n\r\n  const handleNameChange = (event) => {\r\n    setNewName(event.target.value)\r\n  }\r\n\r\n  const handleNumberChange = (event) => {\r\n    setNewNumber(event.target.value)\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={addName}>\r\n      <div>\r\n        name: <input value={newName} onChange={handleNameChange}/>\r\n      </div>\r\n      <div>\r\n        number: <input value={newNumber} onChange={handleNumberChange}/>\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">add</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst Delete = (props) => {\r\n  const handleDelete = (person) => {\r\n    if (window.confirm(`Delete ${person.name}?`)) {\r\n    phoneService.remove(person.id)\r\n                .catch(error => {\r\n                  props.setMessage(`${person.name} already deleted.`, true)\r\n                  setTimeout(() => {props.setMessage(null)}, 5000)\r\n                })\r\n    props.setPersons(props.persons.filter(el => el !== person))\r\n    }\r\n  }\r\n  const toDelete = props.persons.find(el => el.id === props.id)\r\n  return (\r\n    <button type=\"submit\" onClick={() => handleDelete(toDelete)}>Delete</button>\r\n  )\r\n}\r\n\r\nconst Numbers = (props) => {\r\n  var persons = props.persons.filter(person =>\r\n    person.name.toLowerCase().includes(props.filter.toLowerCase())\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      <ul>\r\n        {persons.map(person =>\r\n          <li key={person.name}>\r\n            {person.name} {person.number} <Delete\r\n                                           id={person.id}\r\n                                           persons={props.persons}\r\n                                           setPersons={props.setPersons}\r\n                                           setMessage={props.setMessage} />\r\n          </li>\r\n        )}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst App = () => {\r\n  const [persons, setPersons] = useState([])\r\n  const [filter, setFilter] = useState('')\r\n  const [message, setMessage] = useState(null)\r\n\r\n  useEffect(() => {\r\n    phoneService.getAll()\r\n                .then(response => {setPersons(response.data)})\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <h1>Phonebook</h1>\r\n\r\n      <Message message={message} />\r\n\r\n      <Filter filter={filter} setFilter={setFilter} />\r\n\r\n      <h2>Add a new</h2>\r\n\r\n      <PersonForm persons={persons} setPersons={setPersons} setMessage={setMessage} />\r\n\r\n      <h2>Numbers</h2>\r\n       \r\n      <Numbers persons={persons} setPersons={setPersons} filter={filter} setMessage={setMessage} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}